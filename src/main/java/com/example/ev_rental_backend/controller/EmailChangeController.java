package com.example.ev_rental_backend.controller;


import com.example.ev_rental_backend.config.jwt.JwtTokenUtil;
import com.example.ev_rental_backend.dto.ApiResponse;
import com.example.ev_rental_backend.dto.update_profile.EmailUpdateConfirmDTO;
import com.example.ev_rental_backend.dto.update_profile.EmailUpdateRequestDTO;
import com.example.ev_rental_backend.service.otp.EmailChangeService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/renter")
@RequiredArgsConstructor
@CrossOrigin(origins = "https://swp-391-frontend-mu.vercel.app", allowCredentials = "true")
public class EmailChangeController {
    private final EmailChangeService emailChangeService;
    private final JwtTokenUtil jwtTokenUtil;

    // üü¢ 1Ô∏è‚É£ G·ª≠i y√™u c·∫ßu ƒë·ªïi email ‚Üí h·ªá th·ªëng g·ª≠i OTP ƒë·∫øn email m·ªõi
    @PostMapping("/request-email-change")
    public ResponseEntity<ApiResponse<?>> requestEmailChange(
            @RequestHeader("Authorization") String authHeader,
            @RequestBody @Valid EmailUpdateRequestDTO dto) {

        try {
            String token = authHeader.substring(7);
            Long renterId = jwtTokenUtil.extractUserId(token);

            emailChangeService.requestEmailChange(renterId, dto.getEmail());

            return ResponseEntity.ok(ApiResponse.builder()
                    .status("success")
                    .code(200)
                    .data("‚úÖ ƒê√£ g·ª≠i m√£ OTP ƒë·∫øn email m·ªõi: " + dto.getEmail())
                    .build());

        } catch (Exception e) {
            return ResponseEntity.badRequest().body(ApiResponse.builder()
                    .status("error")
                    .code(400)
                    .data(e.getMessage())
                    .build());
        }
    }

    // üü¢ 2Ô∏è‚É£ X√°c nh·∫≠n OTP ‚Üí c·∫≠p nh·∫≠t email th·∫≠t s·ª±
    @PostMapping("/confirm-email-change")
    public ResponseEntity<ApiResponse<?>> confirmEmailChange(
            @RequestHeader("Authorization") String authHeader,
            @RequestBody @Valid EmailUpdateConfirmDTO dto) {

        try {
            String token = authHeader.substring(7);
            Long renterId = jwtTokenUtil.extractUserId(token);

            emailChangeService.confirmEmailChange(renterId, dto.getOtpCode(), dto.getNewEmail());

            return ResponseEntity.ok(ApiResponse.builder()
                    .status("success")
                    .code(200)
                    .data("üéâ Thay ƒë·ªïi email th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i b·∫±ng ƒë·ªãa ch·ªâ m·ªõi.")
                    .build());

        } catch (RuntimeException e) {
            return ResponseEntity.badRequest().body(ApiResponse.builder()
                    .status("error")
                    .code(400)
                    .data(e.getMessage())
                    .build());
        } catch (Exception e) {
            return ResponseEntity.internalServerError().body(ApiResponse.builder()
                    .status("error")
                    .code(500)
                    .data("L·ªói h·ªá th·ªëng: " + e.getMessage())
                    .build());
        }
    }
}
