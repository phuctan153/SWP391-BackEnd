package com.example.ev_rental_backend.controller;

import com.example.ev_rental_backend.dto.ApiResponse;
import com.example.ev_rental_backend.entity.Policy;
import com.example.ev_rental_backend.service.policy.PolicyService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/policies")
@RequiredArgsConstructor
@CrossOrigin(origins = "https://swp-391-frontend-mu.vercel.app", allowCredentials = "true")
public class PolicyController {

    private final PolicyService policyService;

    // ===========================================================
    // üîπ L·∫•y t·∫•t c·∫£ policy
    // ===========================================================
    @GetMapping
    @PreAuthorize("hasAnyRole('ADMIN', 'STAFF')")
    public ResponseEntity<ApiResponse<List<Policy>>> getAllPolicies() {
        List<Policy> policies = policyService.getAllPolicies();
        return ResponseEntity.ok(ApiResponse.<List<Policy>>builder()
                .status("success")
                .code(HttpStatus.OK.value())
                .data(policies)
                .message("L·∫•y danh s√°ch ch√≠nh s√°ch th√†nh c√¥ng")
                .build());
    }

    // ===========================================================
    // üîπ L·∫•y chi ti·∫øt 1 policy
    // ===========================================================
    @GetMapping("/{id}")
    @PreAuthorize("hasAnyRole('ADMIN', 'STAFF')")
    public ResponseEntity<ApiResponse<Policy>> getPolicyById(@PathVariable Long id) {
        Policy policy = policyService.getPolicyById(id);
        return ResponseEntity.ok(ApiResponse.<Policy>builder()
                .status("success")
                .code(HttpStatus.OK.value())
                .data(policy)
                .message("L·∫•y chi ti·∫øt ch√≠nh s√°ch th√†nh c√¥ng")
                .build());
    }

    // ===========================================================
    // üîπ T·∫°o policy m·ªõi (ACTIVE -> deactivate policy c≈©)
    // ===========================================================
    @PostMapping
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<ApiResponse<Policy>> createPolicy(@RequestBody Policy policy) {
        Policy created = policyService.createPolicy(policy);
        return ResponseEntity.status(HttpStatus.CREATED).body(ApiResponse.<Policy>builder()
                .status("success")
                .code(HttpStatus.CREATED.value())
                .data(created)
                .message("T·∫°o ch√≠nh s√°ch m·ªõi th√†nh c√¥ng")
                .build());
    }

    // ===========================================================
    // üîπ C·∫≠p nh·∫≠t policy (update chi ti·∫øt)
    // ===========================================================
    @PutMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<ApiResponse<Policy>> updatePolicy(
            @PathVariable Long id,
            @RequestBody Policy updatedPolicy) {

        Policy updated = policyService.updatePolicy(id, updatedPolicy);
        return ResponseEntity.ok(ApiResponse.<Policy>builder()
                .status("success")
                .code(HttpStatus.OK.value())
                .data(updated)
                .message("C·∫≠p nh·∫≠t ch√≠nh s√°ch th√†nh c√¥ng")
                .build());
    }

    // ===========================================================
    // üîπ X√≥a m·ªÅm (ƒë·ªïi sang INACTIVE)
    // ===========================================================
    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<ApiResponse<Policy>> deactivatePolicy(@PathVariable Long id) {
        Policy deactivated = policyService.deactivatePolicy(id);
        return ResponseEntity.ok(ApiResponse.<Policy>builder()
                .status("success")
                .code(HttpStatus.OK.value())
                .data(deactivated)
                .message("Ch√≠nh s√°ch #" + id + " ƒë√£ ƒë∆∞·ª£c chuy·ªÉn sang tr·∫°ng th√°i INACTIVE")
                .build());
    }

    // ===========================================================
    // üîπ L·∫•y policy ƒëang ho·∫°t ƒë·ªông hi·ªán t·∫°i
    // ===========================================================
    @GetMapping("/active")
    @PreAuthorize("hasAnyRole('ADMIN', 'STAFF')")
    public ResponseEntity<ApiResponse<Policy>> getActivePolicy() {
        Policy active = policyService.getActivePolicy();
        return ResponseEntity.ok(ApiResponse.<Policy>builder()
                .status("success")
                .code(HttpStatus.OK.value())
                .data(active)
                .message("Ch√≠nh s√°ch hi·ªán t·∫°i ƒëang ho·∫°t ƒë·ªông")
                .build());
    }
}
