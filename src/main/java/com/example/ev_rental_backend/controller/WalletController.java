package com.example.ev_rental_backend.controller;

import com.example.ev_rental_backend.dto.ApiResponse;
import com.example.ev_rental_backend.entity.PaymentTransaction;
import com.example.ev_rental_backend.entity.Wallet;
import com.example.ev_rental_backend.service.wallet.WalletService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.math.BigDecimal;
import java.util.List;

@RestController
@RequestMapping("/api/wallet")
@CrossOrigin(origins = "http://localhost:3000", allowCredentials = "true")
@RequiredArgsConstructor
public class WalletController {

    private final WalletService walletService;

    // üü¢ L·∫•y danh s√°ch v√≠
    @GetMapping
    public ResponseEntity<ApiResponse<List<Wallet>>> getAllWallets() {
        List<Wallet> wallets = walletService.getAllWallets();
        return ResponseEntity.ok(ApiResponse.<List<Wallet>>builder()
                .status("success")
                .code(HttpStatus.OK.value())
                .data(wallets)
                .build());
    }

    // üü¢ Xem chi ti·∫øt v√≠
    @GetMapping("/{id}")
    public ResponseEntity<ApiResponse<Wallet>> getWalletById(@PathVariable Long id) {
        Wallet wallet = walletService.getWalletById(id);
        return ResponseEntity.ok(ApiResponse.<Wallet>builder()
                .status("success")
                .code(HttpStatus.OK.value())
                .data(wallet)
                .build());
    }

    // üü° T·∫°o v√≠ m·ªõi
    @PostMapping("/create/{renterId}")
    public ResponseEntity<ApiResponse<Wallet>> createWallet(@PathVariable Long renterId) {
        Wallet wallet = walletService.createWallet(renterId);
        return ResponseEntity.status(HttpStatus.CREATED).body(ApiResponse.<Wallet>builder()
                .status("success")
                .code(HttpStatus.CREATED.value())
                .data(wallet)
                .message("T·∫°o v√≠ m·ªõi th√†nh c√¥ng cho renter #" + renterId)
                .build());
    }

    // üü† N·∫°p / R√∫t ti·ªÅn
    @PutMapping("/{id}/update-balance")
    public ResponseEntity<ApiResponse<Wallet>> updateBalance(
            @PathVariable Long id,
            @RequestParam BigDecimal amount,
            @RequestParam String action
    ) {
        Wallet wallet = walletService.updateBalance(id, amount, action);
        return ResponseEntity.ok(ApiResponse.<Wallet>builder()
                .status("success")
                .code(HttpStatus.OK.value())
                .data(wallet)
                .message("C·∫≠p nh·∫≠t s·ªë d∆∞ v√≠ th√†nh c√¥ng")
                .build());
    }

    // üîµ K√≠ch ho·∫°t v√≠
    @PutMapping("/{id}/activate")
    public ResponseEntity<ApiResponse<Wallet>> activateWallet(@PathVariable Long id) {
        Wallet wallet = walletService.activateWallet(id);
        return ResponseEntity.ok(ApiResponse.<Wallet>builder()
                .status("success")
                .code(HttpStatus.OK.value())
                .data(wallet)
                .message("K√≠ch ho·∫°t v√≠ th√†nh c√¥ng")
                .build());
    }

    // üî¥ V√¥ hi·ªáu h√≥a v√≠
    @PutMapping("/{id}/deactivate")
    public ResponseEntity<ApiResponse<Wallet>> deactivateWallet(@PathVariable Long id) {
        Wallet wallet = walletService.deactivateWallet(id);
        return ResponseEntity.ok(ApiResponse.<Wallet>builder()
                .status("success")
                .code(HttpStatus.OK.value())
                .data(wallet)
                .message("ƒê√£ v√¥ hi·ªáu h√≥a v√≠ #" + id)
                .build());
    }

    // üü¢ Kh√¥i ph·ª•c v√≠
    @PutMapping("/{id}/restore")
    public ResponseEntity<ApiResponse<Wallet>> restoreWallet(@PathVariable Long id) {
        Wallet wallet = walletService.restoreWallet(id);
        return ResponseEntity.ok(ApiResponse.<Wallet>builder()
                .status("success")
                .code(HttpStatus.OK.value())
                .data(wallet)
                .message("ƒê√£ kh√¥i ph·ª•c v√≠ #" + id)
                .build());
    }

    // üßæ L·ªãch s·ª≠ giao d·ªãch c·ªßa v√≠
    @GetMapping("/{id}/transactions")
    public ResponseEntity<ApiResponse<List<PaymentTransaction>>> getTransactions(@PathVariable Long id) {
        List<PaymentTransaction> transactions = walletService.getTransactionsByWalletId(id);
        return ResponseEntity.ok(ApiResponse.<List<PaymentTransaction>>builder()
                .status("success")
                .code(HttpStatus.OK.value())
                .data(transactions)
                .message("L·∫•y l·ªãch s·ª≠ giao d·ªãch c·ªßa v√≠ #" + id + " th√†nh c√¥ng")
                .build());
    }
}