package com.example.ev_rental_backend.service.contract;

import com.example.ev_rental_backend.dto.booking.BookingContractInfoDTO;
import com.example.ev_rental_backend.dto.contract.AdminContractSignDTO;
import com.example.ev_rental_backend.dto.contract.ContractRequestDTO;
import com.example.ev_rental_backend.dto.contract.ContractResponseDTO;
import com.example.ev_rental_backend.entity.*;
import com.example.ev_rental_backend.exception.CustomException;
import com.example.ev_rental_backend.repository.*;
import com.example.ev_rental_backend.service.notification.NotificationService;
import jakarta.mail.internet.MimeMessage;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.Random;

@Service
@RequiredArgsConstructor
public class ContractServiceImpl implements ContractService{

    private final BookingRepository bookingRepository;
    private final ContractRepository contractRepository;
    private final TermConditionRepository termConditionRepository;
    private final NotificationService notificationService;
    private final PdfGeneratorService pdfGeneratorService;
    private final AdminRepository adminRepository;
    private final StaffRepository staffRepository;
    private final OtpVerificationRepository otpVerificationRepository;
    private final JavaMailSender mailSender;

    @Transactional
    public ContractResponseDTO createContract(ContractRequestDTO dto, Long staffId) {
        // üîπ 1Ô∏è‚É£ L·∫•y booking
        Booking booking = bookingRepository.findById(dto.getBookingId())
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y booking"));

        // üîπ 2Ô∏è‚É£ Ki·ªÉm tra tr·∫°ng th√°i booking
        if (booking.getStatus() != Booking.Status.RESERVED)
            throw new RuntimeException("Booking kh√¥ng h·ª£p l·ªá ƒë·ªÉ t·∫°o h·ª£p ƒë·ªìng");

        // üîπ 3Ô∏è‚É£ L·∫•y staff t·ª´ DB
        Staff staff = staffRepository.findById(staffId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n #" + staffId));

        // üîπ 4Ô∏è‚É£ G√°n staff v√†o booking (tr∆∞·ªõc khi t·∫°o h·ª£p ƒë·ªìng)
        booking.setStaff(staff);
        bookingRepository.save(booking);  // ‚úÖ L∆∞u l·∫°i staff ngay

        // üîπ 5Ô∏è‚É£ T·∫°o h·ª£p ƒë·ªìng
        Contract contract = Contract.builder()
                .booking(booking)
                .contractType(Contract.ContractType.valueOf(dto.getContractType().toUpperCase()))
                .contractDate(LocalDateTime.now())
                .status(Contract.Status.PENDING_ADMIN_SIGNATURE)
                .build();

        contractRepository.save(contract);

        // üîπ 6Ô∏è‚É£ L∆∞u ƒëi·ªÅu kho·∫£n
        for (ContractRequestDTO.TermConditionDTO t : dto.getTerms()) {
            termConditionRepository.save(
                    TermCondition.builder()
                            .termNumber(t.getTermNumber())
                            .termTitle(t.getTermTitle())
                            .termContent(t.getTermContent())
                            .contract(contract)
                            .build()
            );
        }

        // üîπ 7Ô∏è‚É£ Render PDF h·ª£p ƒë·ªìng
        String fileUrl = pdfGeneratorService.generateContractFile(contract);

        // üîπ 8Ô∏è‚É£ L∆∞u l·∫°i contract c√≥ file URL
        contract.setContractFileUrl(fileUrl);
        contractRepository.save(contract);

        // üîπ 9Ô∏è‚É£ G·∫Øn l·∫°i contract v√†o booking
        booking.setContract(contract);
        bookingRepository.save(booking);

        // üîπ üîü Tr·∫£ DTO ph·∫£n h·ªìi
        return mapToResponse(contract);
    }



    @Override
    public BookingContractInfoDTO getBookingInfoForContract(Long bookingId) {
        Booking booking = bookingRepository.findById(bookingId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y booking"));

        Renter renter = booking.getRenter();

        // üîç L·∫•y t√™n renter t·ª´ gi·∫•y t·ªù x√°c minh (∆∞u ti√™n CCCD)
        Optional<IdentityDocument> verifiedDoc = renter.getIdentityDocuments().stream()
                .filter(doc -> doc.getStatus() == IdentityDocument.DocumentStatus.VERIFIED)
                .filter(doc -> doc.getType() == IdentityDocument.DocumentType.NATIONAL_ID)
                .findFirst();

        if (verifiedDoc.isEmpty()) {
            verifiedDoc = renter.getIdentityDocuments().stream()
                    .filter(doc -> doc.getStatus() == IdentityDocument.DocumentStatus.VERIFIED)
                    .filter(doc -> doc.getType() == IdentityDocument.DocumentType.DRIVER_LICENSE)
                    .findFirst();
        }

        String renterFullName = verifiedDoc.map(IdentityDocument::getFullName)
                .orElse(renter.getFullName()); // fallback n·∫øu ch∆∞a x√°c minh

        return BookingContractInfoDTO.builder()
                .bookingId(booking.getBookingId())
                .vehicleName(booking.getVehicle().getVehicleName())
                .vehiclePlate(booking.getVehicle().getPlateNumber())
                .renterName(renterFullName)
                .renterEmail(renter.getEmail())
                .renterPhone(renter.getPhoneNumber())
                .staffName(booking.getStaff().getFullName())
                .startDateTime(booking.getStartDateTime())
                .endDateTime(booking.getEndDateTime())
                .pricePerHour(booking.getPriceSnapshotPerHour())
                .pricePerDay(booking.getPriceSnapshotPerDay())
                .bookingStatus(booking.getStatus().name())
                .build();
    }

    @Transactional
    @Override
    public void sendContractToAdmin(Long contractId) {
        Contract contract = contractRepository.findById(contractId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y h·ª£p ƒë·ªìng #" + contractId));

        if (contract.getContractFileUrl() == null) {
            throw new RuntimeException("H·ª£p ƒë·ªìng ch∆∞a c√≥ file ƒë∆∞·ª£c render. Vui l√≤ng t·∫°o h·ª£p ƒë·ªìng tr∆∞·ªõc khi g·ª≠i.");
        }

        Admin admin = adminRepository.findFirstByStatus(Admin.Status.ACTIVE)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y qu·∫£n tr·ªã vi√™n ƒëang ho·∫°t ƒë·ªông."));
        Long adminId = admin.getGlobalAdminId();

        // üîî G·ª≠i th√¥ng b√°o cho Admin
        notificationService.sendNotificationToAdmin(
                adminId,
                "üìÑ H·ª£p ƒë·ªìng m·ªõi c·∫ßn k√Ω duy·ªát",
                "Staff ƒë√£ g·ª≠i h·ª£p ƒë·ªìng #" + contractId +
                        " l√™n ƒë·ªÉ k√Ω duy·ªát.\nXem t·∫°i: " + contract.getContractFileUrl()
        );

        // üìù C·∫≠p nh·∫≠t tr·∫°ng th√°i
        contract.setStatus(Contract.Status.PENDING_ADMIN_SIGNATURE);
        contractRepository.save(contract);
    }

    @Override
    public List<BookingContractInfoDTO> getContractsByStatus(String status) {
        try {
            Contract.Status enumStatus = Contract.Status.valueOf(status.toUpperCase());
            List<Contract> contracts = contractRepository.findByStatusOrderByContractDateDesc(enumStatus);

            return contracts.stream()
                    .map(contract -> {
                        var booking = contract.getBooking();
                        var renter = booking.getRenter();
                        var staff = booking.getStaff();

                        String renterFullName = renter.getIdentityDocuments().stream()
                                .filter(doc -> doc.getStatus() == IdentityDocument.DocumentStatus.VERIFIED)
                                .filter(doc -> doc.getType() == IdentityDocument.DocumentType.NATIONAL_ID)
                                .map(IdentityDocument::getFullName)
                                .findFirst()
                                .orElseGet(() ->
                                        renter.getIdentityDocuments().stream()
                                                .filter(doc -> doc.getStatus() == IdentityDocument.DocumentStatus.VERIFIED)
                                                .filter(doc -> doc.getType() == IdentityDocument.DocumentType.DRIVER_LICENSE)
                                                .map(IdentityDocument::getFullName)
                                                .findFirst()
                                                .orElse(renter.getFullName())
                                );

                        return BookingContractInfoDTO.builder()
                                .bookingId(booking.getBookingId())
                                .vehicleName(booking.getVehicle().getVehicleName())
                                .vehiclePlate(booking.getVehicle().getPlateNumber())
                                .renterName(renterFullName)
//                                .renterName(renter.getIdentityDocuments().)
                                .renterEmail(renter.getEmail())
                                .renterPhone(renter.getPhoneNumber())
                                .staffName(staff != null ? staff.getFullName() : null)
                                .startDateTime(booking.getStartDateTime())
                                .endDateTime(booking.getEndDateTime())
                                .pricePerHour(booking.getPriceSnapshotPerHour())
                                .pricePerDay(booking.getPriceSnapshotPerDay())
                                .bookingStatus(booking.getStatus().name())
                                .build();
                    })
                    .toList();

        } catch (IllegalArgumentException e) {
            throw new RuntimeException("Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá: " + status);
        }
    }

    @Override
    public void sendOtpForAdminSignature(Long contractId, Long adminId) {
        Admin admin = adminRepository.findById(adminId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y admin #" + adminId));

        Contract contract = contractRepository.findById(contractId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y h·ª£p ƒë·ªìng #" + contractId));

        // üî¢ T·∫°o m√£ OTP ng·∫´u nhi√™n 6 ch·ªØ s·ªë
        String otpCode = String.format("%06d", new Random().nextInt(999999));

        // üíæ L∆∞u OTP v√†o DB (g·∫Øn v·ªõi Contract)
        OtpVerification otp = OtpVerification.builder()
                .contract(contract)
                .otpCode(otpCode)
                .createdAt(LocalDateTime.now())
                .expiredAt(LocalDateTime.now().plusMinutes(5))
                .status(OtpVerification.Status.PENDING)
                .attemptCount(0)
                .build();

        otpVerificationRepository.save(otp);

        // üì© G·ª≠i email OTP cho Admin
        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");
            helper.setTo(admin.getEmail());
            helper.setSubject("üîê M√£ OTP x√°c th·ª±c k√Ω h·ª£p ƒë·ªìng EV Rental");
            helper.setText("""
                Xin ch√†o %s,
                
                M√£ OTP ƒë·ªÉ k√Ω h·ª£p ƒë·ªìng #%d l√†: %s
                M√£ n√†y c√≥ hi·ªáu l·ª±c trong 5 ph√∫t.
                
                Tr√¢n tr·ªçng,
                EV Rental System
                """.formatted(admin.getFullName(), contractId, otpCode), false);

            mailSender.send(message);
        } catch (Exception e) {
            throw new RuntimeException("Kh√¥ng th·ªÉ g·ª≠i email OTP: " + e.getMessage());
        }
    }


    @Override
    @Transactional
    public void verifyAdminSignature(AdminContractSignDTO dto) {
        Admin admin = adminRepository.findById(dto.getAdminId())
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y admin #" + dto.getAdminId()));

        Contract contract = contractRepository.findById(dto.getContractId())
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y h·ª£p ƒë·ªìng #" + dto.getContractId()));

        // üîê Ki·ªÉm tra OTP
        OtpVerification otp = otpVerificationRepository
                .findTopByContractOrderByCreatedAtDesc(contract)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y m√£ OTP."));

        if (!otp.getOtpCode().equals(dto.getOtpCode())) {
            otp.setAttemptCount(otp.getAttemptCount() + 1);
            otpVerificationRepository.save(otp);
            throw new RuntimeException("M√£ OTP kh√¥ng ƒë√∫ng.");
        }

        if (otp.getExpiredAt().isBefore(LocalDateTime.now())) {
            otp.setStatus(OtpVerification.Status.FAILED);
            otpVerificationRepository.save(otp);
            throw new RuntimeException("M√£ OTP ƒë√£ h·∫øt h·∫°n.");
        }

        // ‚úÖ ƒê√°nh d·∫•u OTP h·ª£p l·ªá
        otp.setStatus(OtpVerification.Status.VERIFIED);
        otp.setVerifiedAt(LocalDateTime.now());
        otpVerificationRepository.save(otp);

        // ‚úÖ X·ª≠ l√Ω k√Ω duy·ªát
        Booking booking = contract.getBooking();
        Renter renter = booking.getRenter();

        if (dto.isApproved()) {
            contract.setStatus(Contract.Status.ADMIN_SIGNED);
            contract.setAdmin(admin);
            contract.setAdminSignedAt(LocalDateTime.now());

            // üß© Regenerate file PDF m·ªõi (c·∫≠p nh·∫≠t tr·∫°ng th√°i ADMIN_SIGNED)
            String newFileUrl = pdfGeneratorService.generateContractFile(contract);
            contract.setContractFileUrl(newFileUrl);

            // üíæ L∆∞u sau khi c√≥ file
            contractRepository.save(contract);

            // üìß Th√¥ng b√°o cho renter
            sendEmail(
                    renter.getEmail(),
                    "‚úÖ Xe c·ªßa b·∫°n ƒë√£ s·∫µn s√†ng",
                    """
                    Xin ch√†o %s,
    
                    H·ª£p ƒë·ªìng #%d ƒë√£ ƒë∆∞·ª£c qu·∫£n tr·ªã vi√™n k√Ω duy·ªát th√†nh c√¥ng.
                    Xe c·ªßa b·∫°n ƒë√£ s·∫µn s√†ng ƒë·ªÉ nh·∫≠n t·∫°i tr·∫°m thu√™.
    
                    Tr√¢n tr·ªçng,
                    EV Rental System
                    """.formatted(renter.getFullName(), contract.getContractId())
            );

        } else {
            // ‚ùå Tr∆∞·ªùng h·ª£p b·ªã t·ª´ ch·ªëi
            contract.setStatus(Contract.Status.CANCELLED);
            booking.setStatus(Booking.Status.CANCELLED);
            bookingRepository.save(booking);

            contractRepository.save(contract);

            sendEmail(
                    renter.getEmail(),
                    "‚ùå Booking c·ªßa b·∫°n kh√¥ng ƒë∆∞·ª£c ph√™ duy·ªát",
                    """
                    Xin ch√†o %s,
    
                    ƒê∆°n ƒë·∫∑t xe #%d c·ªßa b·∫°n ƒë√£ kh√¥ng ƒë∆∞·ª£c ki·ªÉm duy·ªát.
                    Ti·ªÅn c·ªçc s·∫Ω ƒë∆∞·ª£c ho√†n l·∫°i trong v√≤ng 3 ng√†y l√†m vi·ªác.
    
                    N·∫øu c√≥ th·∫Øc m·∫Øc, vui l√≤ng li√™n h·ªá b·ªô ph·∫≠n h·ªó tr·ª£.
    
                    Tr√¢n tr·ªçng,
                    EV Rental System
                    """.formatted(renter.getFullName(), booking.getBookingId())
            );
        }
    }


    @Override
    @Transactional
    public void sendOtpToRenter(Long bookingId) {
        Contract contract = contractRepository.findByBooking_BookingId(bookingId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y h·ª£p ƒë·ªìng c·ªßa booking #" + bookingId));

        if (contract.getStatus() != Contract.Status.ADMIN_SIGNED) {
            throw new RuntimeException("H·ª£p ƒë·ªìng ch∆∞a ƒë∆∞·ª£c qu·∫£n tr·ªã vi√™n k√Ω duy·ªát.");
        }

        Renter renter = contract.getBooking().getRenter();

        // üî¢ T·∫°o m√£ OTP ng·∫´u nhi√™n
        String otpCode = String.format("%06d", new Random().nextInt(999999));

        // üíæ L∆∞u OTP
        OtpVerification otp = OtpVerification.builder()
                .contract(contract)
                .otpCode(otpCode)
                .createdAt(LocalDateTime.now())
                .expiredAt(LocalDateTime.now().plusMinutes(5))
                .status(OtpVerification.Status.PENDING)
                .attemptCount(0)
                .build();
        otpVerificationRepository.save(otp);

        // ‚úâÔ∏è G·ª≠i email OTP
        sendEmail(renter.getEmail(),
                "üîê M√£ OTP k√Ω h·ª£p ƒë·ªìng",
                """
                Xin ch√†o %s,

                M√£ OTP ƒë·ªÉ k√Ω h·ª£p ƒë·ªìng #%d c·ªßa b·∫°n l√†: %s
                M√£ n√†y c√≥ hi·ªáu l·ª±c trong 5 ph√∫t.

                Vui l√≤ng ƒë·ªçc l·∫°i m√£ n√†y cho nh√¢n vi√™n t·∫°i tr·∫°m ƒë·ªÉ ho√†n t·∫•t k√Ω k·∫øt h·ª£p ƒë·ªìng.

                Tr√¢n tr·ªçng,
                EV Rental System
                """.formatted(renter.getFullName(), contract.getContractId(), otpCode));
    }

    @Override
    @Transactional
    public void verifyRenterSignature(Long bookingId, Long renterId, String otpCode) {
        Contract contract = contractRepository.findByBooking_BookingId(bookingId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y h·ª£p ƒë·ªìng c·ªßa booking #" + bookingId));

        Booking booking = contract.getBooking();

        // üîí Ki·ªÉm tra quy·ªÅn: renter n√†y c√≥ ph·∫£i ng∆∞·ªùi s·ªü h·ªØu booking kh√¥ng
        if (!booking.getRenter().getRenterId().equals(renterId)) {
            throw new RuntimeException("B·∫°n kh√¥ng c√≥ quy·ªÅn k√Ω h·ª£p ƒë·ªìng n√†y.");
        }

        if (contract.getStatus() != Contract.Status.ADMIN_SIGNED) {
            throw new RuntimeException("H·ª£p ƒë·ªìng ch∆∞a ƒë∆∞·ª£c qu·∫£n tr·ªã vi√™n k√Ω duy·ªát.");
        }

        // üîç L·∫•y OTP m·ªõi nh·∫•t
        Optional<OtpVerification> otpOpt = otpVerificationRepository.findTopByContractOrderByCreatedAtDesc(contract);
        OtpVerification otp = otpOpt.orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y m√£ OTP."));

        // ‚è∞ Ki·ªÉm tra h·∫øt h·∫°n
        if (otp.getExpiredAt().isBefore(LocalDateTime.now())) {
            otp.setStatus(OtpVerification.Status.FAILED);
            otpVerificationRepository.save(otp);
            throw new RuntimeException("M√£ OTP ƒë√£ h·∫øt h·∫°n.");
        }

        // ‚ùå Sai m√£ OTP
        if (!otp.getOtpCode().equals(otpCode)) {
            otp.setAttemptCount(otp.getAttemptCount() + 1);
            otpVerificationRepository.save(otp);
            throw new RuntimeException("M√£ OTP kh√¥ng ƒë√∫ng.");
        }

        // ‚úÖ OTP h·ª£p l·ªá
        otp.setVerifiedAt(LocalDateTime.now());
        otp.setStatus(OtpVerification.Status.VERIFIED);
        otpVerificationRepository.save(otp);

        // üìù C·∫≠p nh·∫≠t h·ª£p ƒë·ªìng
        contract.setStatus(Contract.Status.FULLY_SIGNED);
        contract.setRenterSignedAt(LocalDateTime.now());

        // üß© Regenerate l·∫°i PDF (FULLY_SIGNED)
        String newFileUrl = pdfGeneratorService.generateContractFile(contract);
        contract.setContractFileUrl(newFileUrl);

        contractRepository.save(contract);

        Renter renter = booking.getRenter();

        // üìß G·ª≠i email x√°c nh·∫≠n
        sendEmail(
                renter.getEmail(),
                "‚úÖ H·ª£p ƒë·ªìng ƒë√£ ƒë∆∞·ª£c k√Ω th√†nh c√¥ng",
                """
                Xin ch√†o %s,
    
                B·∫°n ƒë√£ ho√†n t·∫•t k√Ω h·ª£p ƒë·ªìng #%d th√†nh c√¥ng.
                Xe c·ªßa b·∫°n hi·ªán ƒë√£ s·∫µn s√†ng ƒë·ªÉ nh·∫≠n t·∫°i tr·∫°m.
    
                Tr√¢n tr·ªçng,
                EV Rental System
                """.formatted(renter.getFullName(), contract.getContractId())
        );
    }


    @Override
    public ContractResponseDTO getContractByBookingId(Long bookingId) {
        Contract contract = contractRepository.findByBooking_BookingId(bookingId)
                .orElseThrow(() -> new CustomException("Kh√¥ng t√¨m th·∫•y h·ª£p ƒë·ªìng cho booking n√†y."));

        return ContractResponseDTO.builder()
                .contractId(contract.getContractId())
                .bookingId(bookingId)
                .contractType(contract.getContractType().name())
                .contractFileUrl(contract.getContractFileUrl())
                .status(contract.getStatus().name())
                .contractDate(contract.getContractDate())
                .adminSignedAt(contract.getAdminSignedAt())
                .renterSignedAt(contract.getRenterSignedAt())
                .adminName(contract.getAdmin() != null ? contract.getAdmin().getFullName() : null)
                .renterName(contract.getBooking().getRenter().getFullName())
                .terms(contract.getTerms().stream()
                        .map(t -> ContractResponseDTO.TermConditionDTO.builder()
                                .termNumber(t.getTermNumber())
                                .termTitle(t.getTermTitle())
                                .termContent(t.getTermContent())
                                .build())
                        .toList())
                .build();
    }



    // üìß G·ª≠i email helper
    private void sendEmail(String to, String subject, String text) {
        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");
            helper.setTo(to);
            helper.setSubject(subject);
            helper.setText(text, false);
            mailSender.send(message);
        } catch (Exception e) {
            throw new RuntimeException("L·ªói g·ª≠i email: " + e.getMessage());
        }
    }

    private ContractResponseDTO mapToResponse(Contract contract) {
        return ContractResponseDTO.builder()
                .contractId(contract.getContractId())
                .bookingId(contract.getBooking().getBookingId())
                .contractType(contract.getContractType().name())
                .status(contract.getStatus().name())
                .contractDate(contract.getContractDate())
                .contractFileUrl(contract.getContractFileUrl())
                .terms(
                        termConditionRepository.findByContract(contract)
                                .stream()
                                .map(t -> new ContractResponseDTO.TermConditionDTO(
                                        t.getTermNumber(),
                                        t.getTermTitle(),
                                        t.getTermContent()
                                ))
                                .toList()
                )
                .build();
    }
}
