package com.example.ev_rental_backend.service.notification;

import com.example.ev_rental_backend.entity.Booking;
import com.example.ev_rental_backend.entity.Notification;
import com.example.ev_rental_backend.repository.NotificationRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Service
@RequiredArgsConstructor
@Slf4j
@Transactional
public class NotificationServiceImpl implements NotificationService {

    private final NotificationRepository notificationRepository;

    @Override
    public List<Notification> getAllNotificationsForAdmin(Long adminId) {
        return notificationRepository.findByRecipientTypeAndRecipientIdOrderByNotificationIdDesc(
                Notification.RecipientType.ADMIN, adminId);
    }

    public void markAsRead(Long notificationId) {
        notificationRepository.findById(notificationId).ifPresent(notification -> {
            notification.setIsRead(true);
            notificationRepository.save(notification);
        });
    }

    @Override
    public Notification sendNotificationToAdmin(Long adminId, String title, String message) {
        Notification notification = Notification.builder()
                .recipientType(Notification.RecipientType.ADMIN)
                .recipientId(adminId)
                .title(title)
                .message(message)
                .isRead(false)
                .build();
        return notificationRepository.save(notification);
    }

    /**
     * G·ª≠i th√¥ng b√°o nh·∫Øc nh·ªü nh·∫≠n xe (BR-20)
     */
    public void sendPickupReminder(Booking booking) {
        Notification notification = Notification.builder()
                .title("‚è∞ Nh·∫Øc nh·ªü: ƒê·∫∑t xe s·∫Øp b·∫Øt ƒë·∫ßu")
                .message(String.format(
                        "ƒê·∫∑t xe c·ªßa b·∫°n s·∫Ω b·∫Øt ƒë·∫ßu v√†o ng√†y mai (%s). " +
                                "Vui l√≤ng ƒë·∫øn tr·∫°m v√† ho√†n t·∫•t th·ªß t·ª•c nh·∫≠n xe ƒë√∫ng gi·ªù ƒë·ªÉ tr√°nh b·ªã h·ªßy t·ª± ƒë·ªông.",
                        booking.getStartDateTime()
                ))
                .recipientType(Notification.RecipientType.RENTER)
                .recipientId(booking.getRenter().getRenterId())
                .isRead(false)
                .build();

        notificationRepository.save(notification);
        log.info("Pickup reminder sent to renter {}", booking.getRenter().getRenterId());
    }

    /**
     * G·ª≠i th√¥ng b√°o booking ƒë√£ b·ªã h·ªßy
     */
    public void sendBookingCancelled(Booking booking) {
        Notification notification = Notification.builder()
                .title("‚ùå ƒê·∫∑t xe ƒë√£ b·ªã h·ªßy")
                .message(String.format(
                        "ƒê·∫∑t xe #%d c·ªßa b·∫°n ƒë√£ b·ªã h·ªßy.",
                        booking.getBookingId()
                ))
                .recipientType(Notification.RecipientType.RENTER)
                .recipientId(booking.getRenter().getRenterId())
                .isRead(false)
                .build();

        notificationRepository.save(notification);
        log.info("Cancellation notification sent to renter {}", booking.getRenter().getRenterId());
    }

    /**
     * G·ª≠i th√¥ng b√°o booking ƒë√£ h·∫øt h·∫°n (BR-21)
     */
    public void sendBookingExpired(Booking booking) {
        Notification notification = Notification.builder()
                .title("‚ö†Ô∏è ƒê·∫∑t xe ƒë√£ h·∫øt h·∫°n")
                .message(
                        "ƒê·∫∑t xe c·ªßa b·∫°n ƒë√£ b·ªã h·ªßy v√¨ kh√¥ng ho√†n t·∫•t th·ªß t·ª•c nh·∫≠n xe " +
                                "trong v√≤ng 1 gi·ªù k·ªÉ t·ª´ th·ªùi ƒëi·ªÉm b·∫Øt ƒë·∫ßu thu√™."
                )
                .recipientType(Notification.RecipientType.RENTER)
                .recipientId(booking.getRenter().getRenterId())
                .isRead(false)
                .build();

        notificationRepository.save(notification);
        log.info("Expiration notification sent to renter {}", booking.getRenter().getRenterId());
    }

    /**
     * G·ª≠i th√¥ng b√°o booking ƒë√£ ho√†n th√†nh
     */
    public void sendBookingCompleted(Booking booking) {
        Notification notification = Notification.builder()
                .title("‚úÖ ƒê·∫∑t xe ho√†n th√†nh")
                .message(String.format(
                        "C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª•! ƒê·∫∑t xe #%d ƒë√£ ho√†n th√†nh. " +
                                "Vui l√≤ng ƒë√°nh gi√° tr·∫£i nghi·ªám c·ªßa b·∫°n.",
                        booking.getBookingId()
                ))
                .recipientType(Notification.RecipientType.RENTER)
                .recipientId(booking.getRenter().getRenterId())
                .isRead(false)
                .build();

        notificationRepository.save(notification);
        log.info("Completion notification sent to renter {}", booking.getRenter().getRenterId());
    }

    /**
     * G·ª≠i th√¥ng b√°o thanh to√°n th√†nh c√¥ng
     */
    public void sendPaymentSuccess(Booking booking, Double amount) {
        Notification notification = Notification.builder()
                .title("üí≥ Thanh to√°n th√†nh c√¥ng")
                .message(String.format(
                        "B·∫°n ƒë√£ thanh to√°n th√†nh c√¥ng %.0f VND cho ƒë·∫∑t xe #%d.",
                        amount, booking.getBookingId()
                ))
                .recipientType(Notification.RecipientType.RENTER)
                .recipientId(booking.getRenter().getRenterId())
                .isRead(false)
                .build();

        notificationRepository.save(notification);
        log.info("Payment success notification sent to renter {}",
                booking.getRenter().getRenterId());
    }

    /**
     * G·ª≠i th√¥ng b√°o ho√†n ti·ªÅn c·ªçc
     */
    public void sendDepositRefunded(Booking booking, Double amount) {
        Notification notification = Notification.builder()
                .title("üí∞ Ho√†n ti·ªÅn c·ªçc")
                .message(String.format(
                        "Ti·ªÅn c·ªçc %.0f VND ƒë√£ ƒë∆∞·ª£c ho√†n v√†o v√≠ c·ªßa b·∫°n.",
                        amount
                ))
                .recipientType(Notification.RecipientType.RENTER)
                .recipientId(booking.getRenter().getRenterId())
                .isRead(false)
                .build();

        notificationRepository.save(notification);
        log.info("Deposit refund notification sent to renter {}",
                booking.getRenter().getRenterId());
    }

    /**
     * G·ª≠i th√¥ng b√°o cho staff v·ªÅ booking m·ªõi
     */
    public void sendNewBookingToStaff(Booking booking, Long staffId) {
        Notification notification = Notification.builder()
                .title("üìã ƒê·∫∑t xe m·ªõi")
                .message(String.format(
                        "C√≥ ƒë·∫∑t xe m·ªõi #%d t·ª´ kh√°ch h√†ng %s.",
                        booking.getBookingId(), booking.getRenter().getFullName()
                ))
                .recipientType(Notification.RecipientType.STAFF)
                .recipientId(staffId)
                .isRead(false)
                .build();

        notificationRepository.save(notification);
        log.info("New booking notification sent to staff {}", staffId);
    }
}
