package com.example.ev_rental_backend.service.otp;
import com.example.ev_rental_backend.entity.OtpVerificationEmail;
import com.example.ev_rental_backend.entity.Renter;
import com.example.ev_rental_backend.repository.OtpVerificationEmailRepository;
import com.example.ev_rental_backend.repository.RenterRepository;
import jakarta.mail.internet.MimeMessage;
import lombok.RequiredArgsConstructor;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.Random;

@Service
@RequiredArgsConstructor
public class EmailChangeServiceImpl implements EmailChangeService{

    private final RenterRepository renterRepository;
    private final OtpVerificationEmailRepository otpRepository;
    private final JavaMailSender mailSender;


    @Override
    public void requestEmailChange(Long renterId, String newEmail) {
        // 1Ô∏è‚É£ Ki·ªÉm tra xem email m·ªõi ƒë√£ ƒë∆∞·ª£c ai s·ª≠ d·ª•ng ch∆∞a
        if (renterRepository.findByEmail(newEmail).isPresent()) {
            throw new RuntimeException("Email n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi t√†i kho·∫£n kh√°c!");
        }

        // 2Ô∏è‚É£ T√¨m renter theo ID
        Renter renter = renterRepository.findById(renterId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi thu√™ v·ªõi ID: " + renterId));

        // 3Ô∏è‚É£ Sinh OTP ng·∫´u nhi√™n (6 ch·ªØ s·ªë)
        String otp = String.format("%06d", new Random().nextInt(999999));

        // 4Ô∏è‚É£ T·∫°o b·∫£n ghi OTP
        OtpVerificationEmail otpEntity = OtpVerificationEmail.builder()
                .renter(renter)
                .otpCode(otp)
                .status(OtpVerificationEmail.Status.UNVERIFIED)
                .build();

        otpRepository.save(otpEntity);

        // 5Ô∏è‚É£ G·ª≠i email x√°c nh·∫≠n
        sendVerificationEmail(newEmail, otp);
    }

    private void sendVerificationEmail(String email, String otp) {
        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");
            helper.setTo(email);
            helper.setSubject("üîê X√°c nh·∫≠n thay ƒë·ªïi email - EV Rental");
            helper.setText("""
                    <p>Xin ch√†o,</p>
                    <p>M√£ OTP ƒë·ªÉ x√°c nh·∫≠n thay ƒë·ªïi email c·ªßa b·∫°n l√†:</p>
                    <h2>%s</h2>
                    <p>M√£ n√†y c√≥ hi·ªáu l·ª±c trong 10 ph√∫t.</p>
                    <br/>
                    <p>Tr√¢n tr·ªçng,<br>EV Rental System</p>
                    """.formatted(otp), true);
            mailSender.send(message);
        } catch (Exception e) {
            throw new RuntimeException("Kh√¥ng th·ªÉ g·ª≠i email x√°c nh·∫≠n: " + e.getMessage());
        }
    }

    @Override
    public void confirmEmailChange(Long renterId, String otpCode, String newEmail) {
        // 1Ô∏è‚É£ T√¨m renter
        Renter renter = renterRepository.findById(renterId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y renter v·ªõi ID: " + renterId));

        // 2Ô∏è‚É£ L·∫•y OTP m·ªõi nh·∫•t c·ªßa renter
        OtpVerificationEmail latestOtp = otpRepository.findLatestOtpByRenterId(renterId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y m√£ OTP n√†o cho renter n√†y."));

        // 3Ô∏è‚É£ Ki·ªÉm tra OTP c√≤n hi·ªáu l·ª±c kh√¥ng
        if (latestOtp.getExpiresAt().isBefore(LocalDateTime.now())) {
            latestOtp.setStatus(OtpVerificationEmail.Status.EXPIRED);
            otpRepository.save(latestOtp);
            throw new RuntimeException("M√£ OTP ƒë√£ h·∫øt h·∫°n. Vui l√≤ng y√™u c·∫ßu m√£ m·ªõi.");
        }

        // 4Ô∏è‚É£ Ki·ªÉm tra m√£ OTP c√≥ tr√πng kh·ªõp kh√¥ng
        if (!latestOtp.getOtpCode().equals(otpCode)) {
            throw new RuntimeException("‚ùå M√£ OTP kh√¥ng ch√≠nh x√°c!");
        }

        latestOtp.setStatus(OtpVerificationEmail.Status.VERIFIED);
        otpRepository.save(latestOtp);

        renter.setEmail(newEmail);
        renterRepository.save(renter);

    }
}
