package com.example.ev_rental_backend.service.renter;

import com.example.ev_rental_backend.config.jwt.JwtTokenUtil;
import com.example.ev_rental_backend.dto.ApiResponse;
import com.example.ev_rental_backend.dto.login.LoginResponseDTO;
import com.example.ev_rental_backend.entity.Renter;
import com.example.ev_rental_backend.repository.RenterRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class GoogleAuthServiceImpl implements GoogleAuthService {

    private final RenterRepository renterRepository;
    private final JwtTokenUtil jwtTokenUtil;
    private final RenterServiceImpl renterServiceImpl; // ‚úÖ Inject RenterService ƒë·ªÉ g·ªçi h√†m KYC t√°i s·ª≠ d·ª•ng

    @Override
    public ApiResponse<LoginResponseDTO> handleGoogleLogin(String sub, String email, String name, String picture) {

        // üîπ 1. T√¨m user theo googleId ho·∫∑c email
        Renter renter = renterRepository.findByGoogleId(sub)
                .or(() -> renterRepository.findByEmail(email))
                .orElseGet(() -> {
                    // üîπ 2. N·∫øu ch∆∞a c√≥ ‚Üí t·∫°o m·ªõi renter Google
                    Renter newRenter = Renter.builder()
                            .googleId(sub)
                            .email(email)
                            .fullName(name)
                            .authProvider(Renter.AuthProvider.GOOGLE)
                            .status(Renter.Status.PENDING_VERIFICATION)
                            .isBlacklisted(false)
                            .build();
                    return renterRepository.save(newRenter);
                });

        // üîπ 3. Sinh JWT token (c√≥ role)
        String token = jwtTokenUtil.generateTokenWithRole(email, "RENTER");

        // üîπ 4. L·∫•y tr·∫°ng th√°i KYC th√¥ng qua service d√πng chung
        String kycStatus = renterServiceImpl.getKycStatusForRenter(renter);

        // üîπ 5. Tr·∫£ response (token + email + KYC status)
        LoginResponseDTO responseDTO = new LoginResponseDTO(token, email, kycStatus);

        return ApiResponse.<LoginResponseDTO>builder()
                .status("success")
                .code(200)
                .data(responseDTO)
                .build();
    }
}
