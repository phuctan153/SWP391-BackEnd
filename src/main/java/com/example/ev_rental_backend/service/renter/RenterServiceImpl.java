package com.example.ev_rental_backend.service.renter;

import com.example.ev_rental_backend.dto.renter.KycVerificationDTO;
import com.example.ev_rental_backend.dto.renter.RenterRequestDTO;
import com.example.ev_rental_backend.dto.renter.RenterResponseDTO;
import com.example.ev_rental_backend.entity.OtpVerificationEmail;
import com.example.ev_rental_backend.entity.Renter;
import com.example.ev_rental_backend.mapper.KycMapper;
import com.example.ev_rental_backend.mapper.RenterMapper;
import com.example.ev_rental_backend.repository.RenterRepository;
import com.example.ev_rental_backend.service.otp.OtpEmailServiceImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.text.Normalizer;
import java.time.LocalDate;
import java.time.Period;
import java.util.*;
import java.util.stream.Collectors;

@Service
public class RenterServiceImpl implements RenterService{

    @Autowired
    RenterRepository renterRepository;

    @Autowired
    KycMapper kycMapper;

    @Autowired
    RenterMapper renterMapper;

    @Autowired
    OtpEmailServiceImpl otpEmailServiceImpl;

    public RenterResponseDTO registerRenter(RenterRequestDTO dto) {

        // üîπ Ki·ªÉm tra email v√† s·ªë ƒëi·ªán tho·∫°i tr√πng
        if (renterRepository.existsByEmail(dto.getEmail())) {
            throw new RuntimeException("Email ƒë√£ t·ªìn t·∫°i!! Vui l√≤ng ƒëƒÉng nh·∫≠p");
        }
        if (renterRepository.existsByPhoneNumber(dto.getPhoneNumber())) {
            throw new RuntimeException("S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!");
        }

        // üîπ Chuy·ªÉn t·ª´ DTO sang Entity
        Renter renter = renterMapper.toEntity(dto);

        // üîπ Thi·∫øt l·∫≠p c√°c gi√° tr·ªã m·∫∑c ƒë·ªãnh
//        renter.setStatus(Renter.Status.PENDING_VERIFICATION);
        renter.setAuthProvider(Renter.AuthProvider.LOCAL);
        renter.setBlacklisted(false);

        // üîπ L∆∞u DB
        Renter saved = renterRepository.save(renter);

        // üîπ Tr·∫£ v·ªÅ DTO ph·∫£n h·ªìi
        return renterMapper.toResponseDto(saved);
    }

    @Override
    public RenterResponseDTO loginRenter(String email, String password) {
        Renter renter = renterRepository.findByEmail(email)
                .orElseThrow(() -> new RuntimeException("Email kh√¥ng t·ªìn t·∫°i"));

        if (!renter.getPassword().equals(password)) {
            throw new RuntimeException("M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c");
        }

        if (!otpEmailServiceImpl.isRenterVerified(renter.getRenterId())) {
            throw new RuntimeException("T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c qua email!");
        }

        if (renter.getStatus() == null || !renter.getStatus().equals(Renter.Status.PENDING_VERIFICATION)) {
            throw new RuntimeException("T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c CCCD v√† GPLX");
        }

        return renterMapper.toResponseDto(renter);
    }


    @Override
    public Renter verifyKyc(KycVerificationDTO dto) {

        // üîπ 1. L·∫•y renter
        Renter renter = renterRepository.findById(dto.getRenterId())
                .orElseThrow(() -> new NoSuchElementException("Kh√¥ng t√¨m th·∫•y renter v·ªõi ID: " + dto.getRenterId()));

        // üîπ 2. So s√°nh t√™n
        if (!normalize(dto.getNationalName()).equalsIgnoreCase(normalize(dto.getDriverName()))) {
            throw new RuntimeException("T√™n tr√™n CCCD v√† GPLX kh√¥ng kh·ªõp nhau.");
        }

        // üîπ 3. Ki·ªÉm tra tr√πng CCCD / GPLX
        renterRepository.findByNationalId(dto.getNationalId())
                .ifPresent(r -> {
                    if (!r.getRenterId().equals(dto.getRenterId())) {
                        throw new RuntimeException("CCCD n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi ng∆∞·ªùi kh√°c.");
                    }
                });

        renterRepository.findByDriverLicense(dto.getDriverLicense())
                .ifPresent(r -> {
                    if (!r.getRenterId().equals(dto.getRenterId())) {
                        throw new RuntimeException("GPLX n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi ng∆∞·ªùi kh√°c.");
                    }
                });

        // üîπ 4. Ki·ªÉm tra h·∫°n CCCD & GPLX
        LocalDate today = LocalDate.now();
        if (dto.getNationalExpireDate().isBefore(today))
            throw new RuntimeException("CCCD ƒë√£ h·∫øt h·∫°n.");

        if (dto.getDriverExpireDate() == null || !isValidCarLicense(dto.getDriverClass())) {
            throw new RuntimeException("Lo·∫°i GPLX kh√¥ng h·ª£p l·ªá ƒë·ªÉ thu√™ √¥ t√¥. C·∫ßn c√≥ b·∫±ng B1 tr·ªü l√™n.");
        }

        if (dto.getDriverExpireDate().isBefore(today))
            throw new RuntimeException("GPLX ƒë√£ h·∫øt h·∫°n");

        // üîπ 5. Ki·ªÉm tra tu·ªïi
        int age = Period.between(dto.getNationalDob(), today).getYears();
        if (age < 21)
            throw new RuntimeException("Ng∆∞·ªùi d√πng ch∆∞a ƒë·ªß 21 tu·ªïi.");

        // üîπ 6. Ki·ªÉm tra lo·∫°i b·∫±ng l√°i xe


        // üîπ 6. C·∫≠p nh·∫≠t th√¥ng tin v√†o DB
        kycMapper.updateRenterFromKyc(dto, renter);

        renter.setStatus(Renter.Status.PENDING_VERIFICATION); // th√™m d√≤ng n√†y
        // üîπ 7. L∆∞u v√†o DB
        return renterRepository.save(renter);
    }

    private boolean isValidCarLicense(String driverClass) {
        if (driverClass == null || driverClass.isBlank()) return false;

        String type = driverClass.trim().toUpperCase();
        List<String> validCarLicenses = List.of("B1", "B2", "C", "D", "E", "F");

        return validCarLicenses.contains(type);
    }

    @Override
    public String checkKycStatus(Long renterId) {
        Renter renter = renterRepository.findById(renterId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y renter v·ªõi ID: " + renterId));

        boolean hasCCCD = renter.getNationalId() != null && !renter.getNationalId().isEmpty();
        boolean hasGPLX = renter.getDriverLicense() != null && !renter.getDriverLicense().isEmpty();

        if (!hasCCCD || !hasGPLX) {
            return "NEED_UPLOAD"; // ‚ùóÔ∏èC·∫ßn upload CCCD + GPLX
        }

        if (renter.getStatus() == Renter.Status.PENDING_VERIFICATION) {
            return "WAITING_APPROVAL"; // ‚è≥ ƒê√£ upload, ch·ªù admin duy·ªát
        }

        if (renter.getStatus() == Renter.Status.VERIFIED) {
            return "VERIFIED"; // ‚úÖ ƒê√£ x√°c th·ª±c
        }

        return "UNKNOWN";
    }

    @Override
    public List<RenterResponseDTO> getPendingVerificationRenters() {
        return renterRepository.findByStatus(Renter.Status.PENDING_VERIFICATION)
                .stream()
                .map(renterMapper::toResponseDto)
                .toList();
    }

    @Override
    public RenterResponseDTO verifyRenterById(Long renterId) {
        Renter renter = renterRepository.findById(renterId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi thu√™ c√≥ ID: " + renterId));

        if (renter.getStatus() == Renter.Status.VERIFIED) {
            throw new RuntimeException("Ng∆∞·ªùi thu√™ n√†y ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c tr∆∞·ªõc ƒë√≥.");
        }

        if (renter.getStatus() == Renter.Status.DELETED) {
            throw new RuntimeException("Kh√¥ng th·ªÉ x√°c th·ª±c ng∆∞·ªùi thu√™ ƒë√£ b·ªã x√≥a.");
        }

        renter.setStatus(Renter.Status.VERIFIED);
        renterRepository.save(renter);
        return renterMapper.toResponseDto(renter);
    }

    @Override
    public void deleteRenterById(Long renterId) {
        Renter renter = renterRepository.findById(renterId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi thu√™ c√≥ ID: " + renterId));

        if (renter.getStatus() == Renter.Status.DELETED) {
            throw new RuntimeException("Ng∆∞·ªùi thu√™ n√†y ƒë√£ b·ªã x√≥a tr∆∞·ªõc ƒë√≥.");
        }

        renter.setStatus(Renter.Status.DELETED);
        renterRepository.save(renter);
    }

    private String normalize(String input) {
        if (input == null) return "";
        return Normalizer.normalize(input, Normalizer.Form.NFD)
                .replaceAll("\\p{M}", "")
                .replaceAll("[^\\p{ASCII}]", "")
                .toLowerCase(Locale.ROOT)
                .trim();
    }
}
