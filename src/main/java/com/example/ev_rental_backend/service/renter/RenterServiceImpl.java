package com.example.ev_rental_backend.service.renter;

import com.example.ev_rental_backend.dto.renter.KycVerificationDTO;
import com.example.ev_rental_backend.dto.renter.RenterRequestDTO;
import com.example.ev_rental_backend.dto.renter.RenterResponseDTO;
import com.example.ev_rental_backend.entity.IdentityDocument;
import com.example.ev_rental_backend.entity.OtpVerificationEmail;
import com.example.ev_rental_backend.entity.Renter;
import com.example.ev_rental_backend.entity.Wallet;
import com.example.ev_rental_backend.mapper.KycMapper;
import com.example.ev_rental_backend.mapper.RenterMapper;
import com.example.ev_rental_backend.repository.IdentityDocumentRepository;
import com.example.ev_rental_backend.repository.OtpVerificationEmailRepository;
import com.example.ev_rental_backend.repository.RenterRepository;
import com.example.ev_rental_backend.repository.WalletRepository;
import com.example.ev_rental_backend.service.otp.OtpEmailServiceImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cglib.core.Local;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.text.Normalizer;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.Period;
import java.util.*;
import java.util.stream.Collectors;

@Service
public class RenterServiceImpl implements RenterService{

    @Autowired
    RenterRepository renterRepository;

    @Autowired
    WalletRepository walletRepository;

    @Autowired
    IdentityDocumentRepository identityDocumentRepository;

    @Autowired
    OtpVerificationEmailRepository otpVerificationEmailRepository;


    @Autowired
    KycMapper kycMapper;

    @Autowired
    RenterMapper renterMapper;

    @Autowired
    OtpEmailServiceImpl otpEmailServiceImpl;

    @Override
    public RenterResponseDTO registerRenter(RenterRequestDTO dto) {

        // üîπ 1. Ki·ªÉm tra email v√† s·ªë ƒëi·ªán tho·∫°i tr√πng
        if (renterRepository.existsByEmail(dto.getEmail())) {
            throw new RuntimeException("Email ƒë√£ t·ªìn t·∫°i! Vui l√≤ng ƒëƒÉng nh·∫≠p.");
        }
        if (renterRepository.existsByPhoneNumber(dto.getPhoneNumber())) {
            throw new RuntimeException("S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!");
        }

        // üîπ 2. Chuy·ªÉn t·ª´ DTO sang Entity
        Renter renter = renterMapper.toEntity(dto);

        // üîπ 3. Thi·∫øt l·∫≠p gi√° tr·ªã m·∫∑c ƒë·ªãnh
        renter.setStatus(Renter.Status.PENDING_VERIFICATION);
        renter.setAuthProvider(Renter.AuthProvider.LOCAL);
        renter.setBlacklisted(false);
        renter.setCreatedAt(LocalDateTime.now());
        renter.setUpdatedAt(LocalDateTime.now());

        // üîπ 4. L∆∞u renter v√†o DB
        Renter savedRenter = renterRepository.save(renter);

        // üîπ 5. T·∫°o v√≠ (Wallet) m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a t·ªìn t·∫°i
        if (!walletRepository.existsByRenter(savedRenter)) {
            Wallet wallet = Wallet.builder()
                    .renter(savedRenter)
                    .balance(BigDecimal.ZERO)
                    .createdAt(LocalDateTime.now())
                    .updatedAt(LocalDateTime.now())
                    .status(Wallet.Status.ACTIVE)
                    .build();
            walletRepository.save(wallet);
        }

        // üîπ 6. Tr·∫£ v·ªÅ DTO ph·∫£n h·ªìi
        return renterMapper.toResponseDto(savedRenter);
    }


    @Override
    public RenterResponseDTO loginRenter(String email, String password) {
        // üîπ 1. T√¨m renter theo email
        Renter renter = renterRepository.findByEmail(email)
                .orElseThrow(() -> new RuntimeException("Email kh√¥ng t·ªìn t·∫°i"));

        // üîπ 2. Ki·ªÉm tra m·∫≠t kh·∫©u
        if (!renter.getPassword().equals(password)) {
            throw new RuntimeException("M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c");
        }

        // üîπ 3. Ki·ªÉm tra t√†i kho·∫£n b·ªã kho√°
        if (renter.isBlacklisted()) {
            throw new RuntimeException("T√†i kho·∫£n c·ªßa b·∫°n hi·ªán b·ªã t·∫°m kho√° v√¨ nghi ng·ªù ho·∫°t ƒë·ªông vi ph·∫°m. Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ bi·∫øt h∆∞·ªõng kh√°ng ngh·ªã.");
        }

        // üîπ 4. Ki·ªÉm tra OTP email ƒë√£ x√°c th·ª±c ch∆∞a
        boolean isOtpVerified = otpEmailServiceImpl.isRenterVerified(renter.getRenterId());
        String otpStatus = isOtpVerified ? "VERIFIED" : "PENDING";

        // üîπ 5. Ki·ªÉm tra tr·∫°ng th√°i KYC (CCCD + GPLX)
        String kycStatus = getKycStatusForRenter(renter);

        // üîπ 6. X√°c ƒë·ªãnh b∆∞·ªõc ti·∫øp theo cho frontend
        String nextStep;
        if (!isOtpVerified) {
            nextStep = "EMAIL_OTP"; // Ch∆∞a x√°c minh email
        } else {
            nextStep = switch (kycStatus) {
                case "NEED_UPLOAD", "REJECTED", "UNKNOWN" -> "KYC_UPLOAD"; // C·∫ßn upload ho·∫∑c re-upload KYC
                // T√πy b·∫°n ch·ªçn d√πng t√™n n√†o
                case "WAITING_APPROVAL", "VERIFIED" ->
                        "DASHBOARD"; // ƒê∆∞·ª£c v√†o dashboard (n·∫øu pending th√¨ ch·ªù staff duy·ªát)
                default -> "KYC_UPLOAD"; // M·∫∑c ƒë·ªãnh fallback
            };
        }

        // üîπ 7. Map sang DTO ph·∫£n h·ªìi
        RenterResponseDTO response = renterMapper.toResponseDto(renter);
        response.setOtpStatus(otpStatus);
        response.setKycStatus(kycStatus);
        response.setNextStep(nextStep);

        // üîπ 8. Tr·∫£ k·∫øt qu·∫£ cho Controller
        return response;
    }



    @Override
    public Renter verifyKyc(KycVerificationDTO dto) {

        // üîπ 0. Ki·ªÉm tra OTP ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c hay ch∆∞a
        boolean hasVerifiedOtp = otpVerificationEmailRepository.existsVerifiedOtpForRenter(dto.getRenterId());
        if (!hasVerifiedOtp) {
            throw new RuntimeException("Renter ch∆∞a x√°c th·ª±c OTP. Vui l√≤ng ki·ªÉm tra email v√† x√°c nh·∫≠n tr∆∞·ªõc khi g·ª≠i KYC.");
        }

        // üîπ 1. L·∫•y renter
        Renter renter = renterRepository.findById(dto.getRenterId())
                .orElseThrow(() -> new NoSuchElementException("Kh√¥ng t√¨m th·∫•y renter v·ªõi ID: " + dto.getRenterId()));

        // üîπ 2. So s√°nh t√™n
        if (!normalize(dto.getNationalName()).equalsIgnoreCase(normalize(dto.getDriverName()))) {
            throw new RuntimeException("T√™n tr√™n CCCD v√† GPLX kh√¥ng kh·ªõp nhau.");
        }

        // üîπ 3. Ki·ªÉm tra tr√πng CCCD / GPLX
        identityDocumentRepository.findByDocumentNumberAndType(
                        dto.getNationalId(), IdentityDocument.DocumentType.NATIONAL_ID)
                .ifPresent(doc -> {
                    if (!doc.getRenter().getRenterId().equals(dto.getRenterId())) {
                        throw new RuntimeException("CCCD n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi ng∆∞·ªùi kh√°c.");
                    }
                });

        identityDocumentRepository.findByDocumentNumberAndType(
                        dto.getDriverLicense(), IdentityDocument.DocumentType.DRIVER_LICENSE)
                .ifPresent(doc -> {
                    if (!doc.getRenter().getRenterId().equals(dto.getRenterId())) {
                        throw new RuntimeException("GPLX n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi ng∆∞·ªùi kh√°c.");
                    }
                });

        // üîπ 4. Ki·ªÉm tra h·∫°n CCCD & GPLX
        LocalDate today = LocalDate.now();
        if (dto.getNationalExpireDate().isBefore(today))
            throw new RuntimeException("CCCD ƒë√£ h·∫øt h·∫°n.");

        if (dto.getDriverExpireDate() == null || !isValidCarLicense(dto.getDriverClass())) {
            throw new RuntimeException("Lo·∫°i GPLX kh√¥ng h·ª£p l·ªá ƒë·ªÉ thu√™ √¥ t√¥. C·∫ßn c√≥ b·∫±ng B1 tr·ªü l√™n.");
        }

        if (dto.getDriverExpireDate().isBefore(today))
            throw new RuntimeException("GPLX ƒë√£ h·∫øt h·∫°n.");

        // üîπ 5. Ki·ªÉm tra tu·ªïi
        int age = Period.between(dto.getNationalDob(), today).getYears();
        if (age < 21)
            throw new RuntimeException("Ng∆∞·ªùi d√πng ch∆∞a ƒë·ªß 21 tu·ªïi.");

        // üîπ 6. C·∫≠p nh·∫≠t th√¥ng tin v√†o DB
        kycMapper.updateRenterFromKyc(dto, renter);
        renter.setStatus(Renter.Status.PENDING_VERIFICATION);

        // üîπ 7. C·∫≠p nh·∫≠t b·∫£ng IdentityDocument
        saveOrUpdateDocument(
                renter,
                dto.getNationalId(),
                IdentityDocument.DocumentType.NATIONAL_ID,
                dto.getNationalIssueDate(),
                dto.getNationalExpireDate(),
                dto.getNationalName()
        );

        saveOrUpdateDocument(
                renter,
                dto.getDriverLicense(),
                IdentityDocument.DocumentType.DRIVER_LICENSE,
                dto.getDriverIssueDate(),
                dto.getDriverExpireDate(),
                dto.getDriverName()
        );


        // üîπ 8. L∆∞u Renter
        return renterRepository.save(renter);
    }

    private void saveOrUpdateDocument(
            Renter renter,
            String documentNumber,
            IdentityDocument.DocumentType type,
            LocalDate issueDate,
            LocalDate expiryDate,
            String fullName) {

        Optional<IdentityDocument> existingDoc =
                identityDocumentRepository.findByDocumentNumberAndType(documentNumber, type);

        IdentityDocument document = existingDoc.orElseGet(() -> IdentityDocument.builder()
                .renter(renter)
                .type(type)
                .documentNumber(documentNumber)
                .build()
        );

        // üß† G√°n c√°c gi√° tr·ªã m·ªõi (bao g·ªìm fullName)
        document.setFullName(fullName);
        document.setIssueDate(issueDate);
        document.setExpiryDate(expiryDate);
        document.setStatus(IdentityDocument.DocumentStatus.PENDING);
        document.setUpdatedAt(LocalDateTime.now());

        identityDocumentRepository.save(document);
    }





    private boolean isValidCarLicense(String driverClass) {
        if (driverClass == null || driverClass.isBlank()) return false;

        String type = driverClass.trim().toUpperCase();
        List<String> validCarLicenses = List.of("B1", "B2", "C", "D", "E", "F");

        return validCarLicenses.contains(type);
    }

    @Override
    public String checkKycStatus(Long renterId) {
        // üîç 1. T√¨m renter trong database
        Renter renter = renterRepository.findById(renterId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y renter v·ªõi ID: " + renterId));

        // ‚úÖ 2. G·ªçi l·∫°i h√†m x·ª≠ l√Ω logic KYC (ƒë·ªÉ t√°i s·ª≠ d·ª•ng)
        return getKycStatusForRenter(renter);
    }

    @Override
    public String getKycStatusForRenter(Renter renter) {
        // üìÇ 1. L·∫•y danh s√°ch gi·∫•y t·ªù ƒë·ªãnh danh (CCCD, GPLX, ...)
        List<IdentityDocument> docs = renter.getIdentityDocuments();

        // ü™™ 2. Ki·ªÉm tra xem renter ƒë√£ upload CCCD v√† GPLX ch∆∞a
        boolean hasCCCD = docs.stream()
                .anyMatch(d -> d.getType() == IdentityDocument.DocumentType.NATIONAL_ID);

        boolean hasGPLX = docs.stream()
                .anyMatch(d -> d.getType() == IdentityDocument.DocumentType.DRIVER_LICENSE);

        // ‚ùóÔ∏è N·∫øu thi·∫øu 1 trong 2 lo·∫°i gi·∫•y t·ªù ‚Üí y√™u c·∫ßu upload
        if (!hasCCCD || !hasGPLX) {
            return "NEED_UPLOAD";
        }

        // üîç 3. Ki·ªÉm tra tr·∫°ng th√°i gi·∫•y t·ªù
        boolean allPending = docs.stream()
                .allMatch(d -> d.getStatus() == IdentityDocument.DocumentStatus.PENDING);
        boolean anyRejected = docs.stream()
                .anyMatch(d -> d.getStatus() == IdentityDocument.DocumentStatus.REJECTED);
        boolean allVerified = docs.stream()
                .allMatch(d -> d.getStatus() == IdentityDocument.DocumentStatus.VERIFIED);

        // ‚ùå C√≥ gi·∫•y t·ªù b·ªã t·ª´ ch·ªëi
        if (anyRejected) {
            return "REJECTED";
        }

        // ‚è≥ T·∫•t c·∫£ gi·∫•y t·ªù ƒëang ch·ªù duy·ªát
        if (allPending) {
            return "WAITING_APPROVAL";
        }

        // ‚úÖ T·∫•t c·∫£ gi·∫•y t·ªù ƒë√£ VERIFIED v√† renter c≈©ng VERIFIED
        if (allVerified && renter.getStatus() == Renter.Status.VERIFIED) {
            return "VERIFIED";
        }

        // ‚ùì Kh√¥ng r∆°i v√†o b·∫•t k·ª≥ tr∆∞·ªùng h·ª£p n√†o ·ªü tr√™n
        return "UNKNOWN";
    }

    @Override
    public RenterResponseDTO toResponseDto(Renter renter) {
        RenterResponseDTO dto = renterMapper.toResponseDto(renter);

        dto.setKycStatus(getKycStatusForRenter(renter));
        dto.setOtpStatus(
                otpEmailServiceImpl.isRenterVerified(renter.getRenterId()) ? "VERIFIED" : "PENDING"
        );
        dto.setNextStep(
                !otpEmailServiceImpl.isRenterVerified(renter.getRenterId()) ? "EMAIL_OTP" :
                        (!"VERIFIED".equals(getKycStatusForRenter(renter)) ? "KYC" : "DASHBOARD")
        );

        return dto;
    }


    @Override
    public List<RenterResponseDTO> getPendingVerificationRenters() {
        return renterRepository.findByStatus(Renter.Status.PENDING_VERIFICATION)
                .stream()
                .map(renterMapper::toResponseDto)
                .toList();
    }

    @Override
    public RenterResponseDTO verifyRenterById(Long renterId) {
        // üîπ 1. T√¨m renter
        Renter renter = renterRepository.findById(renterId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi thu√™ c√≥ ID: " + renterId));

        // üîπ 2. L·∫•y danh s√°ch gi·∫•y t·ªù
        List<IdentityDocument> docs = renter.getIdentityDocuments();
        if (docs == null || docs.isEmpty()) {
            throw new RuntimeException("Ng∆∞·ªùi thu√™ ch∆∞a g·ª≠i gi·∫•y t·ªù KYC.");
        }

        // üîπ 3. C·∫≠p nh·∫≠t tr·∫°ng th√°i gi·∫•y t·ªù
        for (IdentityDocument doc : docs) {
            if (doc.getStatus() != IdentityDocument.DocumentStatus.VERIFIED) {
                doc.setStatus(IdentityDocument.DocumentStatus.VERIFIED);
                doc.setVerifiedAt(LocalDateTime.now());
                identityDocumentRepository.save(doc);
            }
        }

        // üîπ 4. C·∫≠p nh·∫≠t renter sang VERIFIED
        renter.setStatus(Renter.Status.VERIFIED);
        renter.setUpdatedAt(LocalDateTime.now());
        renterRepository.save(renter);

        // üîπ 6. Tr·∫£ k·∫øt qu·∫£
        return renterMapper.toResponseDto(renter);
    }



    @Override
    public void deleteRenterById(Long renterId) {
        Renter renter = renterRepository.findById(renterId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi thu√™ c√≥ ID: " + renterId));

        if (renter.getStatus() == Renter.Status.DELETED) {
            throw new RuntimeException("Ng∆∞·ªùi thu√™ n√†y ƒë√£ b·ªã x√≥a tr∆∞·ªõc ƒë√≥.");
        }

        renter.setStatus(Renter.Status.DELETED);
        renterRepository.save(renter);
    }

    private String normalize(String input) {
        if (input == null) return "";
        return Normalizer.normalize(input, Normalizer.Form.NFD)
                .replaceAll("\\p{M}", "")
                .replaceAll("[^\\p{ASCII}]", "")
                .toLowerCase(Locale.ROOT)
                .trim();
    }
}