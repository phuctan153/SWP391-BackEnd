package com.example.ev_rental_backend.service.station;

import com.example.ev_rental_backend.dto.station_vehicle.CreateStationResponseDTO;
import com.example.ev_rental_backend.dto.station_vehicle.StationRequestDTO;
import com.example.ev_rental_backend.dto.station_vehicle.StationResponseDTO;
import com.example.ev_rental_backend.dto.station_vehicle.VehicleResponseDTO;
import com.example.ev_rental_backend.entity.Station;
import com.example.ev_rental_backend.entity.Vehicle;
import com.example.ev_rental_backend.exception.CustomException;
import com.example.ev_rental_backend.mapper.StationMapper;
import com.example.ev_rental_backend.repository.StationRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Comparator;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class StationServiceImpl implements StationService {

    @Autowired
    private StationRepository stationRepository;

    @Autowired
    private StationMapper stationMapper;

    @Override
    public List<StationResponseDTO> getStationsByLocation(double userLat, double userLng) {
        List<Station> stations = stationRepository.findAllStationsWithVehicles();

        return stations.stream()
                .map(station -> {
                    List<Vehicle> vehicles = Optional.ofNullable(station.getVehicles()).orElse(List.of());

                    List<Vehicle> availableVehicles = vehicles.stream()
                            .filter(v -> "AVAILABLE".equalsIgnoreCase(v.getStatus().toString()))
                            .toList();

                    double distance = calculateDistance(
                            userLat, userLng,
                            station.getLatitude(), station.getLongitude()
                    );

                    StationResponseDTO dto = stationMapper.toDto(station);
                    dto.setDistance(distance);
                    dto.setAvailableCount(availableVehicles.size());

                    dto.setVehicles(vehicles.stream()
                            .map(v -> VehicleResponseDTO.builder()
                                    .vehicleId(v.getVehicleId())
                                    .plateNumber(v.getPlateNumber())
                                    .batteryLevel(v.getBatteryLevel())
                                    .status(v.getStatus().toString())
                                    .mileage(v.getMileage())
                                    .build())
                            .collect(Collectors.toList()));

                    return dto;
                })
                // üîπ S·∫Øp x·∫øp: distance ‚Üë ‚Üí availableCount ‚Üì
                .sorted(Comparator
                        .comparingDouble(StationResponseDTO::getDistance)
                        .thenComparing(
                                Comparator.<StationResponseDTO>comparingInt(
                                        s -> s.getAvailableCount() != null ? s.getAvailableCount() : 0
                                ).reversed()
                        )
                )

                .collect(Collectors.toList());
    }

    @Override
    public List<StationResponseDTO> getAllStations() {
        List<Station> stations = stationRepository.findAllStationsWithVehicles();

        return stations.stream()
                .map(station -> {
                    List<Vehicle> vehicles = Optional.ofNullable(station.getVehicles()).orElse(List.of());

                    long availableCount = vehicles.stream()
                            .filter(v -> "AVAILABLE".equalsIgnoreCase(v.getStatus().toString()))
                            .count();

                    StationResponseDTO dto = stationMapper.toDto(station);
                    dto.setAvailableCount((int) availableCount);
                    dto.setDistance(null); // kh√¥ng t√≠nh n·∫øu kh√¥ng c√≥ v·ªã tr√≠ ng∆∞·ªùi d√πng

                    dto.setVehicles(vehicles.stream()
                            .map(v -> VehicleResponseDTO.builder()
                                    .vehicleId(v.getVehicleId())
                                    .plateNumber(v.getPlateNumber())
                                    .modelName(v.getModel().getModelName())
                                    .batteryLevel(v.getBatteryLevel())
                                    .status(v.getStatus().toString())
                                    .mileage(v.getMileage())
                                    .build())
                            .collect(Collectors.toList()));

                    return dto;
                })
                .collect(Collectors.toList());
    }

    // üßÆ Haversine formula
    private double calculateDistance(double lat1, double lon1, double lat2, double lon2) {
        final int R = 6371;
        double dLat = Math.toRadians(lat2 - lat1);
        double dLon = Math.toRadians(lon2 - lon1);
        double a = Math.sin(dLat / 2) * Math.sin(dLat / 2)
                + Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2))
                * Math.sin(dLon / 2) * Math.sin(dLon / 2);
        return R * 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    }

    // T·∫°o m·ªõi tr·∫°m
    @Override
    @Transactional
    public CreateStationResponseDTO createStation(StationRequestDTO requestDTO) {
        // 1. Ki·ªÉm tra t√™n tr·∫°m ƒë√£ t·ªìn t·∫°i ch∆∞a
        if (stationRepository.existsByNameIgnoreCase(requestDTO.getName())) {
            throw new CustomException(
                    "T√™n tr·∫°m '" + requestDTO.getName() + "' ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng"
            );
        }

        // 2. Ki·ªÉm tra t·ªça ƒë·ªô c√≥ tr√πng v·ªõi tr·∫°m kh√°c kh√¥ng (trong b√°n k√≠nh ~100m)
        List<Station> nearbyStations = stationRepository.findByNearbyCoordinates(
                requestDTO.getLatitude(),
                requestDTO.getLongitude()
        );

        if (!nearbyStations.isEmpty()) {
            Station existingStation = nearbyStations.get(0);
            throw new CustomException(
                    "T·ªça ƒë·ªô n√†y qu√° g·∫ßn v·ªõi tr·∫°m '" + existingStation.getName() +
                            "' (kho·∫£ng c√°ch < 100m). Vui l√≤ng ch·ªçn v·ªã tr√≠ kh√°c."
            );
        }

        // 3. Validate d·ªØ li·ªáu ƒë·∫ßu v√†o
        validateStationData(requestDTO);

        // 4. Map DTO -> Entity
        Station station = stationMapper.toEntity(requestDTO);

        // 5. L∆∞u station v√†o database
        Station savedStation = stationRepository.save(station);

        // 6. Map Entity -> Response DTO v√† tr·∫£ v·ªÅ
        return stationMapper.toResDto(savedStation);
    }

    @Override
    public StationResponseDTO updateStation(Long stationId, StationRequestDTO requestDTO) {
        Station station = stationRepository.findById(stationId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y tr·∫°m"));

        station.setName(requestDTO.getName());
        station.setLocation(requestDTO.getLocation());
        station.setLatitude(requestDTO.getLatitude());
        station.setLongitude(requestDTO.getLongitude());
        station.setCar_number(requestDTO.getCarNumber());

        // ‚úÖ Chuy·ªÉn ƒë·ªïi String ‚Üí Enum (n·∫øu ng∆∞·ªùi d√πng c√≥ g·ª≠i status)
        if (requestDTO.getStatus() != null) {
            try {
                station.setStatus(Station.Status.valueOf(requestDTO.getStatus().toUpperCase()));
            } catch (IllegalArgumentException e) {
                throw new RuntimeException("Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá! (Ch·ªâ ch·∫•p nh·∫≠n: ACTIVE, INACTIVE)");
            }
        }

        Station updated = stationRepository.save(station);
        return stationMapper.toDto(updated);
    }

    @Override
    public void deleteStation(Long stationId) {
        Station station = stationRepository.findById(stationId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y tr·∫°m"));

        // üü† X√≥a m·ªÅm: ch·ªâ ƒë·ªïi tr·∫°ng th√°i
        station.setStatus(Station.Status.INACTIVE);
        stationRepository.save(station);
    }

    /**
     * Validate d·ªØ li·ªáu ƒë·∫ßu v√†o
     */
    private void validateStationData(StationRequestDTO requestDTO) {
        // Ki·ªÉm tra t·ªça ƒë·ªô h·ª£p l√Ω cho Vi·ªát Nam
        // Vi·ªát Nam: Latitude: 8.5 - 23.4, Longitude: 102.1 - 109.5
        if (requestDTO.getLatitude() < 8.0 || requestDTO.getLatitude() > 24.0) {
            throw new CustomException(
                    "Vƒ© ƒë·ªô kh√¥ng h·ª£p l·ªá cho Vi·ªát Nam. Vƒ© ƒë·ªô ph·∫£i trong kho·∫£ng 8.0 - 24.0"
            );
        }

        if (requestDTO.getLongitude() < 102.0 || requestDTO.getLongitude() > 110.0) {
            throw new CustomException(
                    "Kinh ƒë·ªô kh√¥ng h·ª£p l·ªá cho Vi·ªát Nam. Kinh ƒë·ªô ph·∫£i trong kho·∫£ng 102.0 - 110.0"
            );
        }

        // Ki·ªÉm tra s·ªë l∆∞·ª£ng xe h·ª£p l√Ω
        if (requestDTO.getCarNumber() < 5) {
            throw new CustomException(
                    "Tr·∫°m ph·∫£i c√≥ √≠t nh·∫•t 5 v·ªã tr√≠ ƒë·ªÉ ƒë·∫£m b·∫£o hi·ªáu qu·∫£ v·∫≠n h√†nh"
            );
        }

        if (requestDTO.getCarNumber() > 200) {
            throw new CustomException(
                    "S·ªë l∆∞·ª£ng xe t·ªëi ƒëa kh√¥ng n√™n v∆∞·ª£t qu√° 200 ƒë·ªÉ ƒë·∫£m b·∫£o qu·∫£n l√Ω hi·ªáu qu·∫£"
            );
        }
    }
}
